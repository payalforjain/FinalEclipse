import java.util.*;
public class Solution {

    public int maximalRectangle(char[][] matrix) {
        int n = matrix.length;
        if (n == 0) return 0;
        int m = matrix[0].length;
        if (m == 0) return 0;

        int[][] sum = new int[n][m];
        for (int j = 0; j < m; j++) {
            int curr = 0;
            for (int i = 0; i < n; i++) {
                if (matrix[i][j] == '1') {
                    curr++;
                } else {
                    curr = 0;
                }
                sum[i][j] = curr;
            }
        }
        // printMatrix(sum, n);
        int ret = 0;
        for (int i = 0; i < n; i++) {
            ret = Math.max(ret, largestRectangleArea(sum[i]));
        }

        return ret;
    }

    public int largestRectangleArea(int[] height) {
        Stack<Integer> stack = new Stack<Integer>();
        int i = 0;
        int maxArea = 0;
        int[] h = new int[height.length + 1];
        h = Arrays.copyOf(height, height.length + 1);
        while (i < h.length) {
            if (stack.isEmpty() || h[stack.peek()] <= h[i]) {
                stack.push(i++);
            } else {
                int t = stack.pop();
                maxArea = Math.max(maxArea, h[t] * (stack.isEmpty() ? i : i - stack.peek() - 1));
            }
        }
        return maxArea;
    }

    public void printMatrix(int[][] mat, int n) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.format("%d ", mat[i][j]);
            }
            System.out.format("\n");
        }

    }
    public static void main(String[] args) {
        String[] inp = {};
        // String[] inp = {"00", "11"};
        int n = inp.length;
        int m = inp[0].length();
        char[][] data = new char[n][m];
        for (int i = 0; i < n; i++) {
            data[i] = inp[i].toCharArray();
        }

        // for (int i = 0; i < n; i++) {
        //     for (int j = 0; j < n; j++) {
        //         System.out.format("%c ", data[i][j]);
        //     }
        //     System.out.format("\n");
        // }
        Solution s = new Solution();
        int res = s.maximalRectangle(data);
        System.out.format("%d\n", res);
    }
}